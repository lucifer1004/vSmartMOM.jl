#=
 
This file contains RT elemental-related functions
 
=#
function getKernelDim(RS_type::RRS_plus,ier‚Åª‚Å∫)
    return size(ier‚Åª‚Å∫);
end

function getKernelDim(RS_type::Union{VS_0to1_plus, VS_1to0_plus, RRS_VS_0to1_plus, RRS_VS_1to0_plus}, ier‚Åª‚Å∫, i_Œª‚ÇÅŒª‚ÇÄ)
    #@show size(ier‚Åª‚Å∫,1),size(ier‚Åª‚Å∫,2), size(i_Œª‚ÇÅŒª‚ÇÄ,1)
    return (size(ier‚Åª‚Å∫,1),size(ier‚Åª‚Å∫,2), size(i_Œª‚ÇÅŒª‚ÇÄ,1));
end

function getKernelDimSFI(RS_type::RRS_plus,ieJ‚ÇÄ‚Åª)
    return size(ieJ‚ÇÄ‚Åª);
end

function getKernelDimSFI(RS_type::Union{VS_0to1_plus, VS_1to0_plus, RRS_VS_0to1_plus, RRS_VS_1to0_plus},ieJ‚ÇÄ‚Åª,i_Œª‚ÇÅŒª‚ÇÄ)
    return (size(ieJ‚ÇÄ‚Åª,1), size(i_Œª‚ÇÅŒª‚ÇÄ,1));
end

"Elemental single-scattering layer for RRS"
function elemental_inelastic!(RS_type::Union{VS_0to1_plus, VS_1to0_plus, RRS_VS_0to1_plus, RRS_VS_1to0_plus},
                            pol_type, SFI::Bool, 
                            œÑ_sum::AbstractArray{FT,1},
                            dœÑ::AbstractArray{FT,1},  # dœÑ_Œª: total optical depth of elemental layer (per Œª)
                            œñ::AbstractArray{FT,1},                     # dœÑ:   scattering optical depth of elemental layer (scalar)
                            Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ::AbstractArray{FT,2},   # Z matrix
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ::AbstractArray{FT,2}, 
                            m::Int,                     # m: fourier moment
                            ndoubl::Int,                # ndoubl: number of doubling computations needed 
                            scatter::Bool,              # scatter: flag indicating scattering
                            quad_points::QuadPoints{FT2}, # struct with quadrature points, weights, 
                            added_layer::Union{AddedLayer{FT},AddedLayerRS{FT}}, 
                            I_static,
                            architecture) where {FT<:Union{AbstractFloat, ForwardDiff.Dual},FT2}

    @unpack ier‚Å∫‚Åª, ier‚Åª‚Å∫, iet‚Åª‚Åª, iet‚Å∫‚Å∫, ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª = added_layer
    @unpack qp_Œº, wt_Œº, qp_ŒºN, wt_ŒºN, iŒº‚ÇÄNstart, iŒº‚ÇÄ = quad_points
    arr_type = array_type(architecture)
    œÑ_sum = arr_type(œÑ_sum)
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM
    ier‚Å∫‚Åª .= 0
    ier‚Åª‚Å∫ .= 0
    iet‚Åª‚Åª .= 0
    iet‚Å∫‚Å∫ .= 0
    ieJ‚ÇÄ‚Å∫ .= 0 
    ieJ‚ÇÄ‚Åª .= 0
    # Later on, we can have Zs also vary with index, pretty easy here:
    #Z‚Å∫‚Å∫_ = reshape(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, (size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,1), size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,2),1))
    #Z‚Åª‚Å∫_ = reshape(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, (size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,1), size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,2),1))

    D         = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))
    
    # If in scattering mode:
    if scatter
        # Needs explanation still, different weights: 
        # for m==0, ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.5, while
        # for m>0,  ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.25  
        
        wct02 = m == 0 ? FT(0.50)              : FT(0.25)
        wct2  = m == 0 ? wt_ŒºN/2               : wt_ŒºN/4

        # Calculate r‚Åª‚Å∫ and t‚Å∫‚Å∫
        #Version 2: More computationally intensive definition of a single scattering layer with variable (0-‚àû) absorption
        # Version 2: with absorption in batch mode, low tau_scatt but higher tau_total, needs different equations
        get_elem_rt!(RS_type, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
            dœÑ, œñ, 
            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
            qp_ŒºN, wct2)
        
        if SFI
            get_elem_rt_SFI!(RS_type, ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                œÑ_sum, dœÑ, œñ, 
                Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                qp_ŒºN, ndoubl,wct02, pol_type.n, 
                arr_type(pol_type.I‚ÇÄ), iŒº‚ÇÄ, D);
        end
        
        # Apply D Matrix
        apply_D_matrix_elemental!(RS_type, ndoubl, pol_type.n, 
                                    ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª)
        #println("Apply D matrix done")
        if SFI
            apply_D_matrix_elemental_SFI!(RS_type, ndoubl, pol_type.n, 
                                            ieJ‚ÇÄ‚Åª)
        end
        #println("Apply D matrix SFI done")      
    else 
        # Note: œÑ is not defined here
        iet‚Å∫‚Å∫[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
        iet‚Åª‚Åª[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
    end    
    #@pack! added_layer = r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª   
end


#Suniti: is there a way to pass information like œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref, etc. along with RS_type? So that they can be retrieved as RRS.œñ_Œª‚ÇÅŒª‚ÇÄ for example?
# This one is only for RRS
#=
@kernel function get_elem_rt_RRS!(fscattRayl, 
                            œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref,
                            ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
                            dœÑ, œñ, 
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            qp_ŒºN, wct2)

    i, j, n‚ÇÅ, Œîn = @index(Global, NTuple)
    
    nMax = length(dœÑ_Œª) 
    # n‚ÇÅ covers the full range of wavelengths, while n‚ÇÄ = n‚ÇÅ+Œîn only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    n‚ÇÄ  = n‚ÇÅ + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    #for i in 1:nMax
    #if ((n‚ÇÄ==840) || (n‚ÇÄ==850))
    #    @show n‚ÇÄ, dœÑ_Œª[n‚ÇÄ]
    #end
    #end
    #i_œñ = i_ref + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    #@show   n‚ÇÄ , i_œñ 
    if (1 ‚â§ n‚ÇÄ ‚â§ nMax) & (wct2[j]>1.e-8) 

        # dœÑ‚ÇÄ, dœÑ‚ÇÅ are the purely scattering (elastic+inelastic) molecular elemental 
        # optical thicknesses at wavelengths Œª‚ÇÄ and Œª‚ÇÅ
        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,Œîn] = fscattRayl * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
            (1/( (qp_ŒºN[i] / qp_ŒºN[j]) + (dœÑ_Œª[n‚ÇÅ]/dœÑ_Œª[n‚ÇÄ]) )) * 
            (1 - exp(-((dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j])))) * wct2[j] 
              
        #if ((n‚ÇÄ==840) || (n‚ÇÄ==850))
        #    @show n‚ÇÄ, (1/( (qp_ŒºN[i] / qp_ŒºN[j]) + (dœÑ_Œª[n‚ÇÅ]/dœÑ_Œª[n‚ÇÄ]) )),  
        #    (1 - exp(-((dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j]))))* œñ_Œª[n‚ÇÄ]
        #end
        if (qp_ŒºN[i] == qp_ŒºN[j])
            # @show i,j
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j       
                if abs(dœÑ_Œª[n‚ÇÄ]-dœÑ_Œª[n‚ÇÅ])>1.e-6
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * fscattRayl * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i] *
                        (exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]))/
                        (1 - (dœÑ_Œª[n‚ÇÅ]/dœÑ_Œª[n‚ÇÄ]))                         
                else    
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * fscattRayl * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i] *
                        (1 - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j]))
                end
            else
                iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
            end
        else
            #@show  qp_ŒºN[i], qp_ŒºN[j]  
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 
                œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * fscattRayl * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
                (1 / ( (qp_ŒºN[i]/qp_ŒºN[j]) - (dœÑ_Œª[n‚ÇÅ]/dœÑ_Œª[n‚ÇÄ]) )) * wct2[j] * 
                (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j]))
        end
    else
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
        if i==j
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
        else
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
        end
    end
end
=#
# kernel wrapper:
function get_elem_rt!(RS_type::RRS_plus, 
                        ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
                        dœÑ, œñ,
                        #Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                        qp_ŒºN, wct2)
    @unpack fscattRayl, œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref, iBand, bandSpecLim = RS_type
    device = devi(architecture(ier‚Åª‚Å∫))
    aType = array_type(architecture(ier‚Åª‚Å∫))
    kernel! = get_elem_rt_RRS!(device)
    #@show typeof(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ), typeof(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ), typeof(œñ_Œª‚ÇÅŒª‚ÇÄ), typeof(i_Œª‚ÇÅŒª‚ÇÄ), typeof(i_ref)
    for iB in RS_type.iBand
        event = kernel!(fscattRayl[iB], 
                    aType(œñ_Œª‚ÇÅŒª‚ÇÄ[iB]), aType(i_Œª‚ÇÅŒª‚ÇÄ[iB]), 
                    i_ref,
                    ier‚Åª‚Å∫[:,:,bandSpecLim[iB],:], 
                    iet‚Å∫‚Å∫[:,:,bandSpecLim[iB],:], 
                    dœÑ[bandSpecLim[iB]], 
                    œñ[bandSpecLim[iB]], 
                    aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[:,:,bandSpecLim[iB]]), 
                    aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[:,:,bandSpecLim[iB]]), 
                    qp_ŒºN, wct2, 
                    ndrange=getKernelDim(RS_type,ier‚Åª‚Å∫[:,:,RS_type.bandSpecLim[iB],:])); 
        wait(device, event);
        synchronize_if_gpu();
    end
end

function get_elem_rt!(RS_type::Union{VS_0to1_plus, VS_1to0_plus, RRS_VS_0to1_plus, RRS_VS_1to0_plus}, 
    ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
    dœÑ, œñ,
    Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
    qp_ŒºN, wct2)
    @unpack fscattRayl, i_ref,
            œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, 
            œñ_Œª‚ÇÅŒª‚ÇÄ_VS_n2, i_Œª‚ÇÅŒª‚ÇÄ_VS_n2, 
            œñ_Œª‚ÇÅŒª‚ÇÄ_VS_o2, i_Œª‚ÇÅŒª‚ÇÄ_VS_o2, 
            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2,
            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2 = RS_type
    
    device = devi(architecture(ier‚Åª‚Å∫)) #change this 
    aType = array_type(architecture(ier‚Åª‚Å∫))
    #println("Entered elem_rt") 
    #@show "XX", ier‚Åª‚Å∫[1,1,12630], iet‚Å∫‚Å∫[1,1,12630]
    #RVRS
    kernel! = get_elem_rt_VS!(device)
    @show i_ref
    event = kernel!(aType(fscattRayl), 
        aType(œñ_Œª‚ÇÅŒª‚ÇÄ), aType(i_Œª‚ÇÅŒª‚ÇÄ), i_ref,
        ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
        dœÑ, œñ, 
        aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ), aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ), 
        qp_ŒºN, wct2, 
        ndrange=getKernelDim(RS_type,ier‚Åª‚Å∫,i_Œª‚ÇÅŒª‚ÇÄ)); 
    wait(device, event);
    synchronize_if_gpu();
    #@show "A", ier‚Åª‚Å∫[1,1,12630], iet‚Å∫‚Å∫[1,1,12630]
    t_ier‚Åª‚Å∫  = similar(ier‚Åª‚Å∫)
    t_iet‚Å∫‚Å∫  = similar(ier‚Åª‚Å∫)
    t_ier‚Åª‚Å∫  .= 0
    t_iet‚Å∫‚Å∫  .= 0
    #=
    for i in 1:length(ier‚Åª‚Å∫[1,1,:])
        #if t_ier‚Åª‚Å∫[i]>0
            @show i, ier‚Åª‚Å∫[1,1,i], t_ier‚Åª‚Å∫[1,1,i]
        #end
    end
    =#
    #VS - N2
    kernel! = get_elem_rt_VS!(device)
    event = kernel!(fscattRayl, 
        aType(œñ_Œª‚ÇÅŒª‚ÇÄ_VS_n2), aType(i_Œª‚ÇÅŒª‚ÇÄ_VS_n2), i_ref,
        t_ier‚Åª‚Å∫, t_iet‚Å∫‚Å∫, 
        dœÑ, œñ, 
        aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2), aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2), 
        qp_ŒºN, wct2, 
        ndrange=getKernelDim(RS_type,ier‚Åª‚Å∫,i_Œª‚ÇÅŒª‚ÇÄ_VS_n2)); 
    wait(device, event);
    synchronize_if_gpu();

    #for i in 1:length(ier‚Åª‚Å∫[1,1,:])
    #    if t_ier‚Åª‚Å∫[1,1,i]>0
    #        @show i, ier‚Åª‚Å∫[1,1,i], t_ier‚Åª‚Å∫[1,1,i]
    #    end
    #end

    ier‚Åª‚Å∫ .+= t_ier‚Åª‚Å∫
    iet‚Å∫‚Å∫ .+= t_iet‚Å∫‚Å∫
    #@show "B", ier‚Åª‚Å∫[1,1,12630], iet‚Å∫‚Å∫[1,1,12630],t_ier‚Åª‚Å∫[1,1,12630], t_iet‚Å∫‚Å∫[1,1,12630]
    t_ier‚Åª‚Å∫  .= 0.0
    t_iet‚Å∫‚Å∫  .= 0.0
    #VS - O2
    kernel! = get_elem_rt_VS!(device)
    #@show typeof(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ), typeof(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ), typeof(œñ_Œª‚ÇÅŒª‚ÇÄ), typeof(i_Œª‚ÇÅŒª‚ÇÄ), typeof(i_ref)
    event = kernel!(fscattRayl, 
        aType(œñ_Œª‚ÇÅŒª‚ÇÄ_VS_o2), aType(i_Œª‚ÇÅŒª‚ÇÄ_VS_o2), i_ref,
        t_ier‚Åª‚Å∫, t_iet‚Å∫‚Å∫, 
        dœÑ, œñ, 
        aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2), aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2), 
        qp_ŒºN, wct2, 
        ndrange=getKernelDim(RS_type,ier‚Åª‚Å∫, i_Œª‚ÇÅŒª‚ÇÄ_VS_o2)); 
    wait(device, event);
    synchronize_if_gpu();
    ier‚Åª‚Å∫ .+= t_ier‚Åª‚Å∫
    iet‚Å∫‚Å∫ .+= t_iet‚Å∫‚Å∫
    #@show "C", ier‚Åª‚Å∫[1,1,12630], iet‚Å∫‚Å∫[1,1,12630],t_ier‚Åª‚Å∫[1,1,12630], t_iet‚Å∫‚Å∫[1,1,12630]
end


@kernel function get_elem_rt_VS!(fscattRayl, 
                            œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref, 
                            #œñ_Œª‚ÇÅŒª‚ÇÄ_VS_n2, i_Œª‚ÇÅŒª‚ÇÄ_VS_n2, 
                            #œñ_Œª‚ÇÅŒª‚ÇÄ_VS_o2, i_Œª‚ÇÅŒª‚ÇÄ_VS_o2, 
                            ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
                            dœÑ, œñ, 
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            #Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2, 
                            #Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2, 
                            qp_ŒºN, wct2)
    i, j, Œîn = @index(Global, NTuple) 
    #@unpack fscattRayl, œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, dœÑ‚ÇÄ, dœÑ‚ÇÄ_Œª = RS_type 
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    #dœÑ‚ÇÅ = 1 #dummy for now
    #Suniti: require that the incident wavelength is always the first element of 1:nSpec, and all the others belong to the same target VS band
    #Suniti: Then,
    n‚ÇÄ = i_ref    
    #@show i,j,Œîn
    #@show size(ier‚Åª‚Å∫)
    n‚ÇÅ = i_Œª‚ÇÅŒª‚ÇÄ[Œîn]  
    #@show i,j,n‚ÇÅ,Œîn
    if n‚ÇÅ >0
        if (wct2[j]>1.e-8)
            
            # dœÑ‚ÇÄ, dœÑ‚ÇÅ are the purely scattering (elastic+inelastic) molecular elemental 
            # optical thicknesses at wavelengths Œª‚ÇÄ and Œª‚ÇÅ
            # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
            #@show i,j,n‚ÇÅ, size(ier‚Åª‚Å∫)
            #@show ier‚Åª‚Å∫[i,j,n‚ÇÅ,1]

            ier‚Åª‚Å∫[i,j,n‚ÇÅ,1] = 
                    œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl[n‚ÇÄ] * Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
                    (1/( (qp_ŒºN[i] / qp_ŒºN[j]) + (dœÑ[n‚ÇÅ]/dœÑ[n‚ÇÄ]) )) * 
                    (1 - exp(-((dœÑ[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ[n‚ÇÄ] / qp_ŒºN[j])))) * wct2[j] 
                        
            if (qp_ŒºN[i] == qp_ŒºN[j])
                # @show i,j
                # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
                if i == j       
                    if abs(dœÑ[n‚ÇÄ]-dœÑ[n‚ÇÅ])>1.e-6
                        iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 
                            œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ[n‚ÇÄ] * fscattRayl[n‚ÇÄ] * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i] *
                            (exp(-dœÑ[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ[n‚ÇÅ] / qp_ŒºN[i]))/
                            (1 - (dœÑ[n‚ÇÅ]/dœÑ[n‚ÇÄ]))  
                    else    
                        iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 
                            œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ[n‚ÇÄ] * fscattRayl[n‚ÇÄ] * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i] *
                            (1 - exp(-dœÑ[n‚ÇÄ] / qp_ŒºN[j]))   
                    end
                else
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 0.0
                end
            else
                #@show  qp_ŒºN[i], qp_ŒºN[j]  
                # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
                # (ùëñ ‚â† ùëó)
                iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ[n‚ÇÄ] * fscattRayl[n‚ÇÄ] * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
                        (1 / ( (qp_ŒºN[i]/qp_ŒºN[j]) - (dœÑ[n‚ÇÅ]/dœÑ[n‚ÇÄ]) )) * wct2[j] * 
                        (exp(-dœÑ[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ[n‚ÇÄ] / qp_ŒºN[j]))
            end
        else
            ier‚Åª‚Å∫[i,j,n‚ÇÅ,1] = 0.0
            if i==j
                iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 0.0
            else
                iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 0.0
            end
        end
    end
end

function get_elem_rt_SFI!(RS_type::Union{VS_0to1_plus, VS_1to0_plus, RRS_VS_0to1_plus, RRS_VS_1to0_plus}, 
                        ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                        œÑ_sum, 
                        dœÑ, œñ, 
                        Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                        qp_ŒºN, ndoubl,
                        wct02, nStokes,
                        I‚ÇÄ, iŒº0,D)
    @unpack fscattRayl, i_ref,
    œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, 
    œñ_Œª‚ÇÅŒª‚ÇÄ_VS_n2, i_Œª‚ÇÅŒª‚ÇÄ_VS_n2, 
    œñ_Œª‚ÇÅŒª‚ÇÄ_VS_o2, i_Œª‚ÇÅŒª‚ÇÄ_VS_o2, 
    Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
    Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2,
    Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2 = RS_type
    #@show "XX", ieJ‚ÇÄ‚Å∫[1,1,12630], ieJ‚ÇÄ‚Åª[1,1,12630]
    #@show fscattRayl
    
    device = devi(architecture(ieJ‚ÇÄ‚Å∫))
    aType = array_type(architecture(ieJ‚ÇÄ‚Å∫))
    kernel! = get_elem_rt_SFI_VS!(device)
    
    #@show typeof(ieJ‚ÇÄ‚Å∫), typeof(œÑ_sum), typeof(dœÑ_Œª),typeof(wct02), typeof(qp_ŒºN), typeof(dœÑ_Œª) 
    event = kernel!(fscattRayl, 
        aType(œñ_Œª‚ÇÅŒª‚ÇÄ), aType(i_Œª‚ÇÅŒª‚ÇÄ), i_ref,
        ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
        œÑ_sum, dœÑ, œñ,
        aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ), aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ), 
        qp_ŒºN, ndoubl, wct02, nStokes, 
        I‚ÇÄ, iŒº0, D, 
        ndrange=getKernelDimSFI(RS_type, ieJ‚ÇÄ‚Åª, i_Œª‚ÇÅŒª‚ÇÄ)); #change this
    wait(device, event)
    synchronize_if_gpu();
    #@show "A", ieJ‚ÇÄ‚Å∫[1,1,12630], ieJ‚ÇÄ‚Åª[1,1,12630]
    t_ieJ‚ÇÄ‚Å∫ = similar(ieJ‚ÇÄ‚Åª)
    t_ieJ‚ÇÄ‚Åª = similar(ieJ‚ÇÄ‚Åª)
    t_ieJ‚ÇÄ‚Å∫ .=0;
    t_ieJ‚ÇÄ‚Åª .=0
    #println("Hallo1")
    kernel! = get_elem_rt_SFI_VS!(device)
    event = kernel!(fscattRayl, 
        aType(œñ_Œª‚ÇÅŒª‚ÇÄ_VS_n2), aType(i_Œª‚ÇÅŒª‚ÇÄ_VS_n2), i_ref,
        t_ieJ‚ÇÄ‚Å∫, t_ieJ‚ÇÄ‚Åª, 
        œÑ_sum, dœÑ, œñ,
        aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2), aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_n2), 
        qp_ŒºN, ndoubl, wct02, nStokes, 
        I‚ÇÄ, iŒº0, D, 
        ndrange=getKernelDimSFI(RS_type, ieJ‚ÇÄ‚Åª, i_Œª‚ÇÅŒª‚ÇÄ_VS_n2)); #change this
    wait(device, event)
    synchronize_if_gpu();
    
    ieJ‚ÇÄ‚Å∫ .+= t_ieJ‚ÇÄ‚Å∫
    ieJ‚ÇÄ‚Åª .+= t_ieJ‚ÇÄ‚Åª
    #@show "B", ieJ‚ÇÄ‚Å∫[1,1,12630], ieJ‚ÇÄ‚Åª[1,1,12630]
    #println("Hallo2")
    kernel! = get_elem_rt_SFI_VS!(device)
    event = kernel!(fscattRayl, 
        aType(œñ_Œª‚ÇÅŒª‚ÇÄ_VS_o2), aType(i_Œª‚ÇÅŒª‚ÇÄ_VS_o2), i_ref,
        t_ieJ‚ÇÄ‚Å∫, t_ieJ‚ÇÄ‚Åª, 
        œÑ_sum, dœÑ, œñ,
        aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2), aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ_VS_o2), 
        qp_ŒºN, ndoubl, wct02, nStokes, 
        I‚ÇÄ, iŒº0, D, 
        ndrange=getKernelDimSFI(RS_type, ieJ‚ÇÄ‚Åª, i_Œª‚ÇÅŒª‚ÇÄ_VS_o2)); #change this
    wait(device, event)
    synchronize_if_gpu();
        
    ieJ‚ÇÄ‚Å∫ .+= t_ieJ‚ÇÄ‚Å∫
    ieJ‚ÇÄ‚Åª .+= t_ieJ‚ÇÄ‚Åª
    #@show "C", ieJ‚ÇÄ‚Å∫[1,1,12630],  ieJ‚ÇÄ‚Åª[1,1,12630]
end

#  TODO: Nov 30, 2021
@kernel function get_elem_rt_SFI_VS!(fscattRayl,
                            œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref,
                            ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                            œÑ_sum, dœÑ, œñ,
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            qp_ŒºN, ndoubl,
                            wct02, nStokes, 
                            I‚ÇÄ, iŒº0, D)
    
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0

    i, Œîn = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 

    #Suniti: require that the incident wavelength is always the first element of 1:nSpec, and all the others belong to the same target VS band
    #Suniti: Then,
    n‚ÇÄ = i_ref    
    n‚ÇÅ = i_Œª‚ÇÅŒª‚ÇÄ[Œîn]  
      
    FT = eltype(I‚ÇÄ)
    
    if n‚ÇÅ>0
        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1]=0
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1]=0
        Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
        Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
        for ii = i_start:i_end
            Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1]
            Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1] 
        end
        
        if (i>=i_start) && (i<=i_end)
            #ctr = i-i_start+1
            # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * (dœÑ(Œª)/Œº‚ÇÄ) * exp(-dœÑ(Œª)/Œº‚ÇÄ)
            if abs(dœÑ[n‚ÇÄ]-dœÑ[n‚ÇÅ])>1.e-6
                ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] = 
                        (exp(-dœÑ[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ[n‚ÇÅ] / qp_ŒºN[i])) /
                        ((dœÑ[n‚ÇÅ]/dœÑ[n‚ÇÄ])-1) * 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ[n‚ÇÄ] * fscattRayl[n‚ÇÄ] * Z‚Å∫‚Å∫_I‚ÇÄ * wct02
            else
                ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] = 
                        wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ[n‚ÇÄ] * fscattRayl[n‚ÇÄ] * Z‚Å∫‚Å∫_I‚ÇÄ * 
                        (1 - exp(-dœÑ[n‚ÇÄ] / qp_ŒºN[i_start]))
            end
        else
            # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ - Œº‚ÇÄ)] * [exp(-dœÑ(Œª)/Œº·µ¢) - exp(-dœÑ(Œª)/Œº‚ÇÄ)]
            ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] = 
                        wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ[n‚ÇÄ] * fscattRayl[n‚ÇÄ] * Z‚Å∫‚Å∫_I‚ÇÄ * 
                        (1 /( (qp_ŒºN[i]/qp_ŒºN[i_start]) - (dœÑ[n‚ÇÅ]/dœÑ[n‚ÇÄ]) ) ) * 
                        (exp(-dœÑ[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ[n‚ÇÄ] / qp_ŒºN[i_start]))  
        end
        #TODO
        #J‚ÇÄ‚Åª = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Åª‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ + Œº‚ÇÄ)] * [1 - exp{-dœÑ(Œª)(1/Œº·µ¢ + 1/Œº‚ÇÄ)}]                    
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] = 
                    wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ[n‚ÇÄ] * fscattRayl[n‚ÇÄ] * Z‚Åª‚Å∫_I‚ÇÄ * 
                    (1/( (qp_ŒºN[i] / qp_ŒºN[i_start]) + (dœÑ[n‚ÇÅ]/dœÑ[n‚ÇÄ]) )) *
                    (1 - exp(-( (dœÑ[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ[n‚ÇÄ] / qp_ŒºN[i_start]) ) ))  

        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] *= exp(-œÑ_sum[n‚ÇÄ]/qp_ŒºN[i_start])
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] *= exp(-œÑ_sum[n‚ÇÄ]/qp_ŒºN[i_start])

        if ndoubl >= 1
            ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] = D[i,i]*ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] #D = Diagonal{1,1,-1,-1,...Nquad times}
        end     
    end    
end

#  TODO: Nov 30, 2021
function get_elem_rt_SFI!(RS_type::RRS_plus, 
                        ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                        œÑ_sum, dœÑ_Œª, œñ_Œª, 
                        Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                        qp_ŒºN, ndoubl,
                        wct02, nStokes,
                        I‚ÇÄ, iŒº0,D)
    @unpack fscattRayl, œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref = RS_type
   # @show fscattRayl
    device = devi(architecture(ieJ‚ÇÄ‚Å∫))
    aType = array_type(architecture(ieJ‚ÇÄ‚Å∫))
    kernel! = get_elem_rt_SFI_RRS!(device)
    #@show typeof(ieJ‚ÇÄ‚Å∫), typeof(œÑ_sum), typeof(dœÑ_Œª),typeof(wct02), typeof(qp_ŒºN), typeof(dœÑ_Œª) 
    event = kernel!(fscattRayl, aType(œñ_Œª‚ÇÅŒª‚ÇÄ), aType(i_Œª‚ÇÅŒª‚ÇÄ), 
                i_ref, ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                œÑ_sum, dœÑ_Œª, œñ_Œª,
                aType(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ), aType(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ), 
                qp_ŒºN, ndoubl, wct02, nStokes, 
                I‚ÇÄ, iŒº0, D, 
                ndrange=getKernelDimSFI(RS_type,ieJ‚ÇÄ‚Åª));
    wait(device, event)
    synchronize_if_gpu();
end

# only for RRS
#=
@kernel function get_elem_rt_SFI_RRS!(fscattRayl, 
                            œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref, 
                            ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                            œÑ_sum, dœÑ_Œª, œñ_Œª, 
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            qp_ŒºN, ndoubl,
                            wct02, nStokes,
                            I‚ÇÄ, iŒº0, D)

    # 
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0
    nMax = length(dœÑ_Œª)
    i, _, n‚ÇÅ, Œîn = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    n‚ÇÄ  = n‚ÇÅ + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    #i_œñ = i_ref + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]     
    FT = eltype(I‚ÇÄ)
    if (1 ‚â§ n‚ÇÄ ‚â§ nMax)
        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn]=0
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn]=0    
        Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
        Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
        for ii = i_start:i_end
            Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1]
            Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1] 
        end  
        if (i_start ‚â§ i ‚â§ i_end)
            #ctr = i-i_start+1
            # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * (dœÑ(Œª)/Œº‚ÇÄ) * exp(-dœÑ(Œª)/Œº‚ÇÄ)
            if abs(dœÑ_Œª[n‚ÇÄ]-dœÑ_Œª[n‚ÇÅ])>1.e-6
                ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] = 
                        (exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i])) /
                        ((dœÑ_Œª[n‚ÇÅ]/dœÑ_Œª[n‚ÇÄ])-1) * 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * fscattRayl * Z‚Å∫‚Å∫_I‚ÇÄ * wct02
            else
                ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] = 
                        wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * fscattRayl * Z‚Å∫‚Å∫_I‚ÇÄ * 
                        (1 - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start]))
            end
        else
            # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ - Œº‚ÇÄ)] * [exp(-dœÑ(Œª)/Œº·µ¢) - exp(-dœÑ(Œª)/Œº‚ÇÄ)]
            ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] = 
                    wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * fscattRayl * Z‚Å∫‚Å∫_I‚ÇÄ * 
                    (1 /( (qp_ŒºN[i]/qp_ŒºN[i_start]) - (dœÑ_Œª[n‚ÇÅ]/dœÑ_Œª[n‚ÇÄ]) ) ) * 
                    (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start]))
        end
        #TODO
        #J‚ÇÄ‚Åª = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Åª‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ + Œº‚ÇÄ)] * [1 - exp{-dœÑ(Œª)(1/Œº·µ¢ + 1/Œº‚ÇÄ)}]                    
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] = wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * œñ_Œª[n‚ÇÄ] * fscattRayl * Z‚Åª‚Å∫_I‚ÇÄ * 
                (1/( (qp_ŒºN[i] / qp_ŒºN[i_start]) + (dœÑ_Œª[n‚ÇÅ]/dœÑ_Œª[n‚ÇÄ]) )) *
                (1 - exp(-( (dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start]) ) ))  
        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] *= exp(-œÑ_sum[n‚ÇÄ]/qp_ŒºN[i_start]) #correct this to include n‚ÇÄap
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] *= exp(-œÑ_sum[n‚ÇÄ]/qp_ŒºN[i_start]) 
    end
    if ndoubl >= 1 #double check to make sure this isnt repeated using apply_D
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] = D[i,i] * ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] #D = Diagonal{1,1,-1,-1,...Nquad times}
    end    
    #if ((n‚ÇÄ==840||n‚ÇÄ==850)&&(i==3))       
    #    @show i, n‚ÇÄ, n‚ÇÅ, Œîn, ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn], ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn]
    #end
end


@kernel function apply_D_elemental_RRS!(ndoubl, pol_n, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª)
    i, j, n‚ÇÅ, n‚ÇÄ = @index(Global, NTuple)

    if ndoubl < 1
        ii = mod(i, pol_n) 
        jj = mod(j, pol_n) 
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) 
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ]
            iet‚Åª‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = iet‚Å∫‚Å∫[i, j ,n‚ÇÅ, n‚ÇÄ]
        else
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = -ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] 
            iet‚Åª‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = -iet‚Å∫‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] 
        end
    else
        if mod(i, pol_n) > 2
            ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] = - ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ]
        end 
    end
end
=#
#=
@kernel function apply_D_elemental_SFI!(RS_type::RRS_plus, ndoubl, pol_n, ieJ‚ÇÄ‚Åª)
    i, _, n‚ÇÅ, n‚ÇÄ = @index(Global, NTuple)
    
    if ndoubl>1
        if mod(i, pol_n) > 2
            ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ] = - ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ]
        end 
    end
end

@kernel function apply_D_elemental!(RS_type::Union{VS_0to1_plus, VS_1to0_plus}, 
                        ndoubl, pol_n, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª)

    i, j, Œîn = @index(Global, NTuple)
    @unpack i_Œª‚ÇÅŒª‚ÇÄ = RS_type
    
    n‚ÇÅ = i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    if ndoubl < 1
        ii = mod(i, pol_n) 
        jj = mod(j, pol_n) 
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) 
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, 1] = ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1]
            iet‚Åª‚Åª[i, j, n‚ÇÅ, 1] = iet‚Å∫‚Å∫[i, j ,n‚ÇÅ, 1]
        else
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, 1] = -ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1] 
            iet‚Åª‚Åª[i, j, n‚ÇÅ, 1] = -iet‚Å∫‚Å∫[i, j, n‚ÇÅ, 1] 
        end
    else
        if mod(i, pol_n) > 2
            ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1] = - ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1]
        end 
    end
end

@kernel function apply_D_elemental_SFI!(RS_type::Union{VS_0to1_plus, VS_1to0_plus}, 
                        ndoubl, pol_n, ieJ‚ÇÄ‚Åª)
    i, _, Œîn = @index(Global, NTuple)
    @unpack i_Œª‚ÇÅŒª‚ÇÄ = RS_type
    
    n‚ÇÅ = i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    if ndoubl>1
        if mod(i, pol_n) > 2
            ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] = - ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1]
        end 
    end
end

function apply_D_matrix_elemental!(RS_type::RRS_plus, ndoubl::Int, n_stokes::Int, 
                                    ier‚Åª‚Å∫::AbstractArray{FT,4}, 
                                    iet‚Å∫‚Å∫::AbstractArray{FT,4}, 
                                    ier‚Å∫‚Åª::AbstractArray{FT,4}, 
                                    iet‚Åª‚Åª::AbstractArray{FT,4}) where {FT}
    device = devi(architecture(ier‚Åª‚Å∫))
    applyD_kernel! = apply_D_elemental_RRS!(device)
    event = applyD_kernel!(ndoubl,n_stokes, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª, ndrange=size(ier‚Åª‚Å∫));
    wait(device, event);
    synchronize_if_gpu();
    return nothing
end

function apply_D_matrix_elemental_SFI!(RS_type::Union{RRS_plus, VS_0to1_plus, VS_1to0_plus},
    ndoubl::Int, n_stokes::Int, ieJ‚ÇÄ‚Åª::AbstractArray{FT,4}) where {FT}
    if ndoubl > 1
        return nothing
    else 
        device = devi(architecture(ieJ‚ÇÄ‚Åª))
        applyD_kernel! = apply_D_elemental_SFI!(device)
        event = applyD_kernel!(RS_type,ndoubl,n_stokes, ieJ‚ÇÄ‚Åª, ndrange=size(ieJ‚ÇÄ‚Åª));
        wait(device, event);
        synchronize();
        return nothing
    end
end
=#